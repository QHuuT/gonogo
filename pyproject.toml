[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "gonogo"
version = "0.1.0"
description = "GDPR-compliant blog with comment system"
authors = [{name = "GoNoGo Team"}]
dependencies = [
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "jinja2>=3.1.2",
    "sqlalchemy>=2.0.23",
    "alembic>=1.12.1",
    "psycopg2-binary>=2.9.9",
    "pydantic>=2.5.0",
    "python-dotenv>=1.0.0",
    "markdown>=3.5.1",
    "python-frontmatter>=1.0.8",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.1",
    "httpx>=0.25.2",
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.1",
    "watchfiles>=0.21.0",
]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --cov=src --cov-report=term-missing --cov-report=html"
asyncio_mode = "auto"

# BDD configuration
bdd_features_base_dir = "tests/bdd/features"
markers = [
    "smoke: marks tests as smoke tests (critical functionality)",
    "functional: marks tests as functional tests",
    "security: marks tests as security tests",
    "gdpr: marks tests as GDPR compliance tests",
    "performance: marks tests as performance tests",
    "bdd: marks tests as BDD scenarios",
    "detailed: marks tests for detailed debugging mode",
    "test_type: categorizes tests by type (unit, integration, etc.)"
]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]