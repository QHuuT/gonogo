name: ðŸ§ª Test
description: Create a test case for a user story
title: "TEST-XXXXX: [Brief description of the test]"
labels: ["test", "needs-triage"]
projects: ["gonogo/1"]
assignees: []
body:
  - type: markdown
    attributes:
      value: |
        ## Test Creation

        Create a test case for a specific user story. Tests inherit the component from their parent user story.

  - type: input
    id: parent-user-story
    attributes:
      label: Parent User Story (Optional)
      description: Which User Story is this test for? (Optional - for component inheritance)
      placeholder: "US-XXXXX: Description of the parent user story"
    validations:
      required: false

  - type: markdown
    attributes:
      value: |
        **Component Inheritance**: If a parent User Story is specified, this test will automatically inherit the component from that User Story.

  - type: textarea
    id: test-description
    attributes:
      label: Test Description
      description: What does this test validate?
      placeholder: |
        **Test Purpose**: Verify that blog search returns relevant results
        **Test Type**: Integration test
        **Test Scope**: Search functionality
    validations:
      required: true

  - type: textarea
    id: test-steps
    attributes:
      label: Test Steps
      description: Detailed steps to execute this test
      placeholder: |
        1. Navigate to blog homepage
        2. Enter search term "python"
        3. Click search button
        4. Verify results contain relevant posts
        5. Verify results are ranked by relevance
    validations:
      required: true

  - type: textarea
    id: expected-results
    attributes:
      label: Expected Results
      description: What should happen when the test passes?
      placeholder: |
        - Search returns at least 1 result
        - All results contain the search keyword
        - Results are displayed within 2 seconds
        - Most relevant posts appear first
    validations:
      required: true

  - type: dropdown
    id: test-type
    attributes:
      label: Test Type
      description: What type of test is this?
      options:
        - Unit Test
        - Integration Test
        - End-to-End Test
        - Performance Test
        - Security Test
        - Accessibility Test
    validations:
      required: true

  - type: dropdown
    id: test-priority
    attributes:
      label: Test Priority
      description: How critical is this test?
      options:
        - critical
        - high
        - medium
        - low
      default: 2
    validations:
      required: false

  - type: dropdown
    id: test-category
    attributes:
      label: Test Category
      description: Test execution category for organization and filtering
      options:
        - smoke
        - edge
        - regression
        - performance
        - error-handling
        - compliance-gdpr
        - compliance-rgaa
        - compliance-doc
        - compliance-project-management
      default: 0
    validations:
      required: false

  - type: input
    id: test-file-path
    attributes:
      label: Test File Path
      description: Path to the test file
      placeholder: "tests/integration/test_search.py"
    validations:
      required: false

  - type: input
    id: test-function-name
    attributes:
      label: Test Function Name (Optional)
      description: Name of the test function
      placeholder: "test_search_returns_results"
    validations:
      required: false

  - type: input
    id: bdd-feature-file
    attributes:
      label: BDD Feature File (Optional)
      description: Path to BDD feature file if applicable
      placeholder: "features/search.feature"
    validations:
      required: false

  - type: input
    id: bdd-scenario-name
    attributes:
      label: BDD Scenario Name (Optional)
      description: Name of the BDD scenario
      placeholder: "User searches for blog posts"
    validations:
      required: false

  - type: textarea
    id: test-data
    attributes:
      label: Test Data
      description: Any specific data needed for this test
      placeholder: |
        - Sample blog posts with "python" keyword
        - User account for authenticated tests
        - Database state requirements
    validations:
      required: false

  - type: textarea
    id: automation-notes
    attributes:
      label: Automation Notes
      description: Notes for test automation implementation
      placeholder: |
        - Can be automated with Playwright
        - Requires API endpoint testing
        - Mock external services needed
    validations:
      required: false

  - type: checkboxes
    id: test-characteristics
    attributes:
      label: Test Characteristics
      description: Test automation and verification requirements
      options:
        - label: Is automated
        - label: Requires manual verification
        - label: Tests GDPR compliance
        - label: Tests security aspects

  - type: input
    id: code-coverage-percentage
    attributes:
      label: Code Coverage Percentage (Optional)
      description: Expected or actual code coverage
      placeholder: "85.5"
    validations:
      required: false

  - type: textarea
    id: covered-files
    attributes:
      label: Covered Files (Optional)
      description: Files covered by this test
      placeholder: |
        - src/search/search_service.py
        - src/api/search_endpoints.py
    validations:
      required: false

  - type: dropdown
    id: component
    attributes:
      label: Component (Optional)
      description: Component this test covers (inherited from parent if not specified)
      options:
        - Frontend/UI
        - Backend/API
        - Database
        - Security/GDPR
        - Testing
        - CI/CD
        - Documentation
    validations:
      required: false

  - type: markdown
    attributes:
      value: |
        ## Implementation Example

        **Python Test with Markers:**
        ```python
        @pytest.mark.epic("EP-00001")
        @pytest.mark.user_story("US-00010")
        @pytest.mark.component("backend")
        @pytest.mark.priority("high")
        @pytest.mark.test_category("smoke")
        def test_user_login():
            assert authenticate_user("user", "password")

        # RGAA compliance test example
        @pytest.mark.test_category("compliance-rgaa")
        @pytest.mark.priority("high")
        def test_keyboard_navigation():
            assert all_features_keyboard_accessible()

        # GDPR compliance test example
        @pytest.mark.test_category("compliance-gdpr")
        @pytest.mark.priority("critical")
        def test_user_data_deletion():
            assert user_can_delete_all_data()

        # Project management compliance test example
        @pytest.mark.test_category("compliance-project-management")
        @pytest.mark.priority("high")
        def test_epic_template_enforces_fields():
            assert epic_template_has_required_fields()

        # Error handling test example
        @pytest.mark.test_category("error-handling")
        @pytest.mark.priority("medium")
        def test_invalid_input_handled_gracefully():
            assert system_handles_invalid_input_without_crash()
        ```

        **BDD Test with Tags:**
        ```gherkin
        @epic:EP-00001 @user_story:US-00010 @component:backend @test_category:smoke
        Feature: User Authentication

          Scenario: User logs in successfully
            Given a registered user
            When they enter valid credentials
            Then they are logged in
        ```

        ## Next Steps

        1. Test will be reviewed and integrated into test suite
        2. Component will be inherited from parent User Story if not specified
        3. Test markers will be synced to RTM database: `python tools/test-db-integration.py discover tests`
        4. Test execution will be tracked in RTM reports
        5. Implementation follows project testing standards

        **Traceability** - This test will be automatically linked to the parent user story and tracked in the RTM.