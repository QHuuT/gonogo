version: '3.8'

services:
  # GoNoGo Blog Application
  app:
    build: .
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - DATABASE_URL=postgresql://gonogo:gonogo_password@db:5432/gonogo_dev
      - SECRET_KEY=dev-secret-key-change-in-production
      - GDPR_TEST_MODE=true
    volumes:
      - ./quality/monitoring/logs:/app/quality/monitoring/logs
      - ./static:/app/static
    depends_on:
      - db
      - redis
    networks:
      - gonogo-network
    restart: unless-stopped

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=gonogo_dev
      - POSTGRES_USER=gonogo
      - POSTGRES_PASSWORD=gonogo_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - gonogo-network
    restart: unless-stopped

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - gonogo-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Nginx for production-like setup
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./static:/var/www/static:ro
      - ./quality/monitoring/logs/nginx:/var/log/nginx
    depends_on:
      - app
    networks:
      - gonogo-network
    restart: unless-stopped

  # Prometheus for monitoring (optional, for development)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./config/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - gonogo-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for dashboards (optional, for development)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/monitoring/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - gonogo-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  gonogo-network:
    driver: bridge